{"version":3,"sources":["features/currenciesSlice.ts","features/fromSlice.ts","features/toSlice.ts","features/filterSlice.ts","features/baseSlice.ts","features/renderSlice.ts","features/reverseSlice.ts","services/currenciesApi.ts","features/preparedQuerySlice.ts","app/store.ts","components/Selects/selects.tsx","components/Result/result.tsx","components/Calculator/calculator.tsx","api/consts.ts","components/CurrenciesList/currenciesList.tsx","api/index.ts","App.tsx","index.tsx"],"names":["currenciesSlice","createSlice","name","initialState","data","reducers","loadCurrencies","state","action","payload","actions","currenciesReducer","reducer","fromSlice","value","loadFromValue","toSlice","loadToValue","filterSlice","array","loadFiltredCurrenciess","baseValue","loadBaseValue","render","isShouldRender","reverse","isShouldReverse","currenciesApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","prepareHeaders","headers","set","tagTypes","endpoints","builder","getCurrencies","query","getExchangeRates","combineStr","useGetCurrenciesQuery","useGetExchangeRatesQuery","prepareQuerygSlice","loadPrepareQuery","store","configureStore","currencies","fromValue","fromReducer","toValue","toReducer","filtredCurrencies","filterReducer","baseReducer","renderReducer","reverseReducer","prepareString","prepareQueryReducer","middleware","getDefaultMiddleware","concat","setupListeners","dispatch","Selects","props","useDispatch","type","arrData","useSelector","arrDataFilter","invert","useState","internFrom","setInternFrom","internTo","setInternTo","internBase","setInternBase","displaySelect","setDisplaySelect","useEffect","className","htmlFor","style","textTransform","placeholder","id","typeProps","slice","setValue","onChange","e","ev","typeS","target","toUpperCase","filtredArr","filter","toLowerCase","includes","onCange","onFocus","selectType","maxLength","icon","faCaretUp","faCaretDown","map","onClick","str","onClickLi","join","Result","amount","from","result","toFixed","to","Calculator","selectedFrom","selectedTo","setAmount","validator","enterValue","isNaN","test","convertRes","a","newFrom","replace","trim","newTo","find","x","paramsQuery","amountFrom","preparedQuery","event","handleChange","temoraryFtom","faRotate","myHeaders","Headers","append","requestOptions","method","CurrenciesList","resultRates","setResultRates","exchangeRates","combineArr","item","base","fetch","then","res","text","JSON","parse","rates","Object","entries","val","Number","App","role","path","element","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7422b41c.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface CurenciesState {\n  data: string[][]\n}\n\nconst initialState: CurenciesState = {\n  data: []\n};\n\nexport const currenciesSlice = createSlice({\n  name: 'currencies',\n  initialState,\n  reducers: {\n    loadCurrencies: (state, action: PayloadAction<string[][]>) => {\n      state.data = action.payload;\n    }\n  }\n});\n\nexport const { loadCurrencies } = currenciesSlice.actions;\n\nexport const currenciesReducer = currenciesSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface FromState {\n  value: string\n}\n\nconst initialState: FromState = {\n  value: 'UAH Ukrainian Hryvnia'\n};\n\nexport const fromSlice = createSlice({\n  name: 'fromValue',\n  initialState,\n  reducers: {\n    loadFromValue: (state, action: PayloadAction<string>) => {\n      state.value = action.payload;\n    }\n  }\n});\n\nexport const { loadFromValue } = fromSlice.actions;\n\nexport default fromSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface ToState {\n  value: string\n}\n\nconst initialState: ToState = {\n  value: 'USD United States Dollar'\n};\n\nexport const toSlice = createSlice({\n  name: 'toValue',\n  initialState,\n  reducers: {\n    loadToValue: (state, action: PayloadAction<string>) => {\n      state.value = action.payload;\n    }\n  }\n});\n\nexport const { loadToValue} = toSlice.actions;\n\nexport default toSlice.reducer;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface FilterState {\n  array: string[][]\n}\n\nconst initialState: FilterState = {\n  array: []\n};\n\nexport const filterSlice = createSlice({\n  name: 'filtred',\n  initialState,\n  reducers: {\n    loadFiltredCurrenciess: (state, action: PayloadAction<string[][]>) => {\n      state.array = action.payload;\n    }\n  }\n});\n\nexport const { loadFiltredCurrenciess } = filterSlice.actions;\n\nexport default filterSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface BaseState {\n  value: string\n}\n\nconst initialState: BaseState = {\n  value: 'USD United States Dollar'\n};\n\nexport const baseValue = createSlice({\n  name: 'baseValue',\n  initialState,\n  reducers: {\n    loadBaseValue: (state, action: PayloadAction<string>) => {\n      state.value = action.payload;\n    }\n  }\n});\n\nexport const { loadBaseValue} = baseValue.actions;\n\nexport default baseValue.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface RenderState {\n  value: boolean\n}\n\nconst initialState: RenderState = {\n  value: true\n};\n\nexport const render = createSlice({\n  name: 'render',\n  initialState,\n  reducers: {\n    isShouldRender: (state, action: PayloadAction<boolean>) => {\n      state.value = action.payload;\n    }\n  }\n});\n\nexport const { isShouldRender} = render.actions;\n\nexport default render.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface RverseState {\n  value: boolean\n}\n\nconst initialState: RverseState = {\n  value: true\n};\n\nexport const reverse = createSlice({\n  name: 'reverse',\n  initialState,\n  reducers: {\n    isShouldReverse: (state, action: PayloadAction<boolean>) => {\n      state.value = action.payload;\n    }\n  }\n});\n\nexport const { isShouldReverse} = reverse.actions;\n\nexport default reverse.reducer;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst baseUrl = 'https://api.apilayer.com/currency_data/';\n\nexport const currenciesApi = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({baseUrl: baseUrl, prepareHeaders: (headers ) => {\n    headers.set('apikey', 'VrLd2rRsJm6EN0BsvafaQkLbWvU2jl91');\n    \n    return headers;\n  }}),\n  tagTypes: ['Record'],\n  endpoints: (builder) => ({\n    getCurrencies: builder.query<Currencies, string>({\n      query: (name) => name,\n    }),\n    getExchangeRates: builder.query<Result, string>({\n      query: (combineStr) => combineStr,\n    })\n  })\n\n});\n\nexport const { useGetCurrenciesQuery, useGetExchangeRatesQuery } = currenciesApi;\n ","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface PrepareQueryState {\n  query: string\n}\n\nconst initialState: PrepareQueryState = {\n  query: ''\n};\n\nexport const prepareQuerygSlice = createSlice({\n  name: 'prepareString',\n  initialState,\n  reducers: {\n    loadPrepareQuery: (state, action: PayloadAction<string>) => {\n      state.query = action.payload;\n    }\n  }\n});\n\nexport const { loadPrepareQuery } = prepareQuerygSlice.actions;\n\nexport default prepareQuerygSlice.reducer;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { currenciesReducer } from '../features/currenciesSlice';\nimport fromReducer from '../features/fromSlice';\nimport toReducer from '../features/toSlice';\nimport filterReducer from '../features/filterSlice';\nimport baseReducer from '../features/baseSlice';\nimport renderReducer from '../features/renderSlice';\nimport reverseReducer from '../features/reverseSlice';\nimport { currenciesApi } from '../services/currenciesApi';\nimport prepareQueryReducer from '../features/preparedQuerySlice';\n\n\n\n\nexport const store = configureStore({\n  reducer: {\n    currencies: currenciesReducer,\n    fromValue: fromReducer,\n    toValue: toReducer,\n    filtredCurrencies: filterReducer,\n    baseValue: baseReducer,\n    render: renderReducer,\n    reverse: reverseReducer,\n    prepareString: prepareQueryReducer,\n    [currenciesApi.reducerPath]: currenciesApi.reducer,\n  },\n\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(currenciesApi.middleware),\n});\n\nsetupListeners(store.dispatch);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from 'react';\nimport { RootState } from '../../app/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isShouldReverse } from '../../features/reverseSlice';\nimport { isShouldRender } from '../../features/renderSlice';\nimport { loadFiltredCurrenciess } from '../../features/filterSlice';\nimport { loadFromValue } from '../../features/fromSlice';\nimport { loadToValue } from '../../features/toSlice';\nimport { loadBaseValue } from '../../features/baseSlice';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport './Selects.scss';\n\ntype Props = {\n  type: string,\n};\n\nexport const Selects: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  const { type } = props;\n  const arrData = useSelector((state: RootState) => state.currencies.data);\n  const fromValue = useSelector((state: RootState) => state.fromValue.value);\n  const toValue = useSelector((state: RootState) => state.toValue.value);\n  const baseValue = useSelector((state: RootState) => state.baseValue.value);\n  const arrDataFilter = useSelector((state: RootState) => state.filtredCurrencies.array);\n  const invert = useSelector((state: RootState) => state.reverse.value);\n  const [internFrom, setInternFrom] = useState(fromValue);\n  const [internTo, setInternTo] = useState(toValue);\n  const [internBase, setInternBase] = useState(baseValue);\n  const [displaySelect, setDisplaySelect] = useState(false);\n\n  const setValue = (typeProps: string) => {\n    switch (typeProps){\n      case 'from':\n        return internFrom;\n\n      case 'to':\n        return internTo;\n\n      case 'base':\n        return internBase.slice(0,3);\n\n      default:\n        break;\n    }\n  };\n\n  const onFocus = (selectType: string) => {\n    setDisplaySelect(true);\n    dispatch(isShouldRender(false));\n    dispatch(loadFiltredCurrenciess(arrData));\n\n    switch (selectType) {\n      case 'from':\n        setInternFrom('');\n        return internFrom;\n\n      case 'to':\n        setInternTo('');\n        return internTo;\n\n      case 'base':\n        setInternBase('');\n        return internBase;\n\n      default:\n        break;\n    }\n  };\n\n  const onCange = (ev: React.ChangeEvent<HTMLInputElement>, typeS: string) => {\n    const { value } = ev.target;\n\n    setDisplaySelect(true);\n\n    switch (typeS) {\n      case 'from':\n        setInternFrom(value.toUpperCase());\n        break;\n\n      case 'to':\n        setInternTo(value.toUpperCase());\n        break;\n\n      case 'base':\n        setInternBase(value.toUpperCase());\n        break;\n\n      default:\n        break;\n    }\n\n    const filtredArr = arrData.filter((data) => value === ''\n      ? data\n      : data[0].toLowerCase().includes(value.toLowerCase()));\n\n    dispatch(loadFiltredCurrenciess(filtredArr));\n  };\n\n  const onClickLi = (str: string, type: string) => {\n    switch (type) {\n      case 'from':\n        dispatch(loadFromValue(str));\n        setInternFrom(str);\n        dispatch(loadFiltredCurrenciess(arrData));\n        return fromValue;\n\n      case 'to':\n        dispatch(loadToValue(str));\n        setInternTo(str);\n        dispatch(loadFiltredCurrenciess(arrData));\n        return toValue;\n\n      case 'base':\n        dispatch(loadBaseValue(str));\n        setInternBase(str.slice(0,3));\n        dispatch(loadFiltredCurrenciess(arrData));\n        return baseValue;\n\n        default:\n          break;\n    }\n  };\n\n\n  useEffect(() => {\n    if (invert) {\n      setInternFrom(fromValue);\n      setInternTo(toValue);\n      dispatch(isShouldReverse(false));\n    }  \n  }, [invert,]);\n\n  return (\n    <div className=\"search\">\n      <label htmlFor=\"curr\" style={{textTransform: 'capitalize'}}>\n        {type}\n        <input\n          type=\"text\"\n          placeholder=\"Start typting for filter\"\n          className=\"search__input\"\n          name=\"currencies\"\n          id=\"curr\"\n          value={setValue(type)}\n          onChange={(e) => onCange(e, type)}\n          onFocus={() => onFocus(type)}\n          maxLength={3}\n        />\n        <div className=\"search__icon\">\n        {displaySelect\n        ? <FontAwesomeIcon icon={faCaretUp} />\n        : <FontAwesomeIcon icon={faCaretDown} />}\n        </div>\n      </label>\n      {displaySelect && (\n        <ul className=\"search__list list-group\">\n          {arrDataFilter.map((data: string[]) => (\n            <li\n              className=\"search__item list-group-item list-group-item-action\"\n              key={`${data[0]}${type}`}\n              onClick={() => {\n                onClickLi(data.join(' '), type);\n                setDisplaySelect(false);\n              }}\n            >\n              {`${data.join(' ')}`}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import React, { FC, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { isShouldRender } from '../../features/renderSlice';\nimport { useGetExchangeRatesQuery } from '../../services/currenciesApi';\n\nexport const Result: FC = () => {\n  const dispatch = useDispatch();\n  const render = useSelector((state: RootState) => state.render.value);\n  const query = useSelector((state: RootState) => state.prepareString.query);\n  const { data } = useGetExchangeRatesQuery(query);\n\n  useEffect(() => {\n    dispatch(isShouldRender(true));\n  },[query]);\n\n  return (\n    <h4>\n      {data && render &&\n       `${data.query.amount} ${data.query.from} = ${data.result.toFixed(2)} ${data.query.to}`}\n    </h4>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { RootState } from '../../app/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadFromValue } from '../../features/fromSlice';\nimport { loadToValue } from '../../features/toSlice';\nimport { isShouldReverse } from '../../features/reverseSlice';\nimport { isShouldRender } from '../../features/renderSlice';\nimport { Selects } from '../Selects';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRotate } from '@fortawesome/free-solid-svg-icons';\nimport './Calculator.scss';\nimport { loadPrepareQuery } from '../../features/preparedQuerySlice';\nimport { Result } from '../Result';\n\nexport const Calculator = () => {\n  const dispatch = useDispatch();\n  const currencies = useSelector((state: RootState) => state.currencies.data);\n  const selectedFrom = useSelector((state: RootState) => state.fromValue.value);\n  const selectedTo = useSelector((state: RootState) => state.toValue.value);\n  const [amount, setAmount] = useState('');\n  \n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {\n    const { value, name } = event.target;\n\n\n    switch (name) {\n      case 'selectedFrom':\n        dispatch(loadFromValue(value));\n        break;\n\n      case 'selectedTo':\n        dispatch(loadToValue(value));\n        break;\n\n      case 'amount':\n        setAmount(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const invertCurrencies = () => {\n    const temoraryFtom = selectedFrom;\n\n    dispatch(loadFromValue(selectedTo));\n    dispatch(loadToValue(temoraryFtom));\n    dispatch(isShouldReverse(true));\n    dispatch(isShouldRender(false));\n    convertRes();\n  };\n\n  const validator = (enterValue: string) => {\n    if (!isNaN(+enterValue)) {\n      return true;\n    }\n\n    const RegExp = /^\\d+ [A-Z,a-z]{3} in [A-Z,a-z]{3}/g;\n\n    return RegExp.test(enterValue);\n  };\n\n  const convertRes = async () => {\n    if (validator(amount)) {\n  \n      if (isNaN(+amount)) {\n        const newFrom = amount.replace(/\\d/g, '').trim().slice(0,3).toUpperCase();\n        const newTo = amount.replace(/\\d/g, '').trim().slice(-3).toUpperCase();\n\n        dispatch(loadFromValue(currencies.find(x => x[0] === newFrom)!.join(' ')));\n        dispatch(loadToValue(currencies.find(x => x[0] === newTo)!.join(' ')));\n      }\n\n      const paramsQuery = {\n        amountFrom: amount.replace(/\\D/g, ''),\n        from: selectedFrom.slice(0,3),\n        to: selectedTo.slice(0,3)\n      };\n\n      const preparedQuery = `/convert?to=${paramsQuery.to}&from=${paramsQuery.from}&amount=${paramsQuery.amountFrom}`;\n\n      dispatch(loadPrepareQuery(preparedQuery));\n    }\n  };\n\n  useEffect(() => {\n    dispatch(isShouldRender(false));\n  }, []);\n\n  return (\n    <form className=\"convertor\">\n      <h3 className=\"convertor__title\">Currency Convertor</h3>\n      <div className=\"convertor__conteiner mb-3\">\n        <label htmlFor=\"amount\" className=\"form-label\">\n          Enter Ammount\n        </label>\n        <input\n          placeholder=\"Example: 100 uah in usd or 100\"\n          className=\"convertor__input\"\n          type=\"text\"\n          name=\"amount\"\n          id=\"amount\"\n          value={amount}\n          onChange={(e) => handleChange(e)}\n        />\n      </div>\n      <div className=\"convertor__selectors\">\n        <Selects\n          type=\"from\"\n        />\n        <button\n          className=\"convertor__invert btn btn-primary\"\n          type=\"button\"\n          onClick={invertCurrencies}\n        >\n          <FontAwesomeIcon icon={faRotate} />\n        </button>\n        <Selects\n          type=\"to\"\n        />\n      </div>\n      <div className=\"mb-3\">\n        <button\n          type=\"button\"\n          onClick={() => convertRes()}\n          className=\"btn btn-primary w-100\"\n        >\n          Convert\n        </button>\n      </div>\n      <div className=\"convertor__inner\">\n        <Result />\n      </div>\n    </form>\n  );\n};\n","export const BASE_URL = 'https://api.apilayer.com/fixer';\n// export const BASE_URL = 'https://api.apilayer.com/exchangerates_data';\nconst myHeaders = new Headers();\n\n//myHeaders.append('apikey'', 'QcNkBWCbg01lRNKI6H64YumEVU0shxS7');\nmyHeaders.append('apikey', 'VrLd2rRsJm6EN0BsvafaQkLbWvU2jl91');\n\nexport const requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { FC, useState, useEffect } from 'react';\nimport { RootState } from '../../app/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Selects } from '../Selects';\nimport { getExchangeratesData } from '../../api';\nimport { loadFiltredCurrenciess } from '../../features/filterSlice';\nimport './CurrenciesList.scss';\n\nexport const CurrenciesList: FC = () => {\n  const dispatch = useDispatch();\n  const baseValue = useSelector((state: RootState) => state.baseValue.value);\n  const [resultRates, setResultRates] = useState<string[][]>([]);\n  const exchangeRates = ['USD','EUR','PLN','CZK','GBP','UAH'];\n  const combineArr = resultRates.filter(item => exchangeRates.includes(item[0]) && item[0] !== baseValue);\n\n  const convert = (val: string) => {\n    const number = 1 / Number(val);\n\n    return number.toFixed(2);\n  };\n\n  useEffect(() => {\n    getExchangeratesData(baseValue)\n      .then(data => setResultRates(Object.entries(data)));\n  },[baseValue]);\n\n  return (\n    <div className=\"List\">\n      <h3>List Of Exchange Rates</h3>\n      <Selects type=\"base\" />\n      <ul className=\"list-group list-group-flush\">\n        {combineArr.map((item: string[]) => (\n          <li className=\"List__item list-group-item list-group-item-dark\" key={item[0]}>\n            {`1 ${item[0]} = ${convert(item[1])} ${baseValue.slice(0,3)}`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { BASE_URL, requestOptions } from \"./consts\";\n\n\n// export const getJsonApiArray = (): Promise<string[][]> => {\n//   return fetch(`${BASE_URL}/symbols`, requestOptions)\n//     .then(res => res.text())\n//     .then(result => JSON.parse(result))\n//     .then(data => {\n//       console.log(Object.entries(data.symbols));\n//       return Object.entries(data.symbols);\n//     });\n// };\n\n// export const getExchangeRates = (amount: string, from: string, to: string) => {\n//   return fetch(`${BASE_URL}/convert?to=${to.slice(0,3)}&from=${from.slice(0,3)}&amount=${amount}`, requestOptions)\n//     .then(response => response.text())\n//     .then(result => JSON.parse(result));\n// };\n\nexport const getExchangeratesData = (base: string): Promise<Curr> => {\n  return fetch(`${BASE_URL}/latest?base=${base.slice(0,3)}`, requestOptions)\n    .then(res => res.text())\n    .then(result => JSON.parse(result))\n    .then(data => data.rates);\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport { Calculator } from './components/Calculator';\nimport { CurrenciesList } from './components/CurrenciesList';\nimport { loadCurrencies } from './features/currenciesSlice';\nimport { useGetCurrenciesQuery } from './services/currenciesApi';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const{ data } = useGetCurrenciesQuery('list');\n  const array = Object.entries(data?.currencies || {});\n\n  useEffect(() => {\n    if (data) {\n      dispatch(loadCurrencies(array));\n    }\n  },[data]);\n\n  return (\n    <div className=\"app\">\n      <nav className=\"app__nav\">\n        <Link\n          to=\"/\"\n          className=\"app__btn btn btn-pink\"\n          role=\"button\"\n        >\n          Calculator\n        </Link>\n        <Link\n          to=\"/list\"\n          className=\"app__btn btn btn-pink\"\n          role=\"button\"\n        >\n          List Exchange Rates\n        </Link>\n      </nav>\n      <Routes>\n        <Route path=\"/\" element={<Calculator/>} />\n        <Route path=\"/list\" element={<CurrenciesList/>} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}