{"version":3,"sources":["store/types.ts","store/index.ts","search/search.tsx","api/index.ts","store/selectors.ts","App.tsx","index.tsx"],"names":["ActionsTypes","initialState","currencies","store","createStore","state","action","type","SetCurrencies","payload","composeWithDevTools","Search","props","arrayDataForSelect","setCurrentValue","currentValue","changeCurrentValue","useState","arrData","setArrData","displaySelect","setDisplaySelect","className","htmlFor","name","id","value","onChange","e","ev","target","console","log","toUpperCase","filtredArr","filter","data","toLowerCase","includes","onCange","onFocus","maxLength","icon","map","onClick","currencyHttp","apiKey","getCurrenciesSelector","App","useSelector","selectedFrom","setSelectedFrom","selectedTo","setSelectedTo","amount","setAmount","convertAmount","setConvertAmount","getSelectedCurr","str","convertRes","a","preventDefault","from","to","fetch","then","res","json","result","getExchange","exchange","Object","values","toFixed","event","handleChange","oldAmount","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45f1b3da.chunk.js","sourcesContent":["import { Action as BaseAction } from 'redux';\n\nexport interface State {\n  currencies: Currency[]\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum ActionsTypes {\n  SetCurrencies = 'SetCurrencies'\n}\n\nexport type SetCurrenciesAction = Action<ActionsTypes.SetCurrencies, Currency[]>;\n\nexport type Actions = SetCurrenciesAction;\n","import { createStore, Reducer } from 'redux';\nimport { composeWithDevTools } from '@redux-devtools/extension';\nimport { State, Actions, ActionsTypes } from './types';\n// import { arrOfCurrencies } from '../api';\n// import { SET_CURRENCIES } from './actions';\n\nconst initialState: State = {\n  currencies: [],\n};\n\nconst reducer: Reducer<State, Actions> = (state = initialState, action): State => {\n  switch (action.type) {\n    case ActionsTypes.SetCurrencies:\n      return {\n        ...state,\n        currencies: [...state.currencies, ...action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer, composeWithDevTools());\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useState } from 'react';\nimport './search.scss';\n// import { useSelector } from 'react-redux';\n\ntype Props = {\n  arrayDataForSelect: Currency[],\n  setCurrentValue: (str: string, type: string) => void;\n  type: string,\n  currentValue: string;\n  changeCurrentValue: (arg: string) => void;\n};\n\nexport const Search: React.FC<Props> = (props) => {\n  const {\n    arrayDataForSelect, setCurrentValue, type, currentValue, changeCurrentValue,\n  } = props;\n  const [arrData, setArrData] = useState<Currency[] | null>(null);\n  const [displaySelect, setDisplaySelect] = useState(false);\n\n  const onFocus = () => {\n    setDisplaySelect(true);\n    changeCurrentValue('');\n  };\n\n  const onCange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = ev.target;\n\n    console.log(arrayDataForSelect);\n\n    setDisplaySelect(true);\n    setArrData(arrayDataForSelect);\n    changeCurrentValue(value.toUpperCase());\n\n    console.log(arrayDataForSelect);\n\n    const filtredArr = arrayDataForSelect.filter(data => value === ''\n      ? data\n      : data.id.toLowerCase().includes(value.toLowerCase()));\n\n    console.log(filtredArr);\n    setArrData(filtredArr);\n  };\n\n  // useEffect(() => {\n  //   console.log(arrayDataForSelect);\n  // }, []);\n\n  return (\n    <div className=\"search w-25\">\n      <label htmlFor=\"curr\">\n        {type}\n        <input\n          type=\"text\"\n          className=\"search__input w-100\"\n          name=\"currencies\"\n          id=\"curr\"\n          value={currentValue}\n          onChange={(e) => onCange(e)}\n          onFocus={onFocus}\n          maxLength={3}\n        />\n        {displaySelect\n          ? (<FontAwesomeIcon icon=\"caret-down\" />)\n          : (<FontAwesomeIcon icon=\"caret-down\" />)}\n      </label>\n      {arrData && displaySelect && (\n        <ul className=\"search__list list-group\">\n          {arrData.map(data => (\n            <li\n              className=\"search__item list-group-item list-group-item-action\"\n              key={data.id}\n              onClick={() => {\n                changeCurrentValue(data.id);\n                setCurrentValue(data.id, type);\n                setDisplaySelect(false);\n              }}\n            >\n              {data.id}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","const currencyHttp = 'http://free.currconv.com';\nconst apiKey = 'dd3f60ee0680556feb45';\n// const myHeaders = new Headers();\n\n// myHeaders.append('apikey', 'QcNkBWCbg01lRNKI6H64YumEVU0shxS7');\n\n// const requestOptions = {\n//   method: 'GET',\n//   headers: myHeaders,\n// };\n\nexport const getJsonApiArray = (): Promise<Currency[]> => {\n  return fetch(`${currencyHttp}/api/v7/currencies?apiKey=${apiKey}`)\n    .then(res => res.json())\n    .then(result => Object.values(result.results));\n};\n\nexport const getExchangeRates = (from: string, to: string) => {\n  return fetch(`${currencyHttp}/api/v7/convert?q=${from}_${to},${to}_${from}&compact=ultra&apiKey=${apiKey}`)\n    .then(res => res.json())\n    .then(result => result);\n};\n\n// export const arrOfCurrencies = async (): Currency[] => await getJsonApiArray();\n","import { State } from './types';\n\nexport const getCurrenciesSelector = (state: State): Currency[] => state.currencies;\n\n// export const getTodosSelector = (state: State): Todo[] => state.todos;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Search } from './search';\nimport './App.scss';\nimport { getExchangeRates } from './api';\nimport { getCurrenciesSelector } from './store/selectors';\n\nconst App: React.FC = () => {\n  const currencies = useSelector(getCurrenciesSelector);\n  // const [currencies, setCurrencies] = useState<Currency[]>([]);\n  const [selectedFrom, setSelectedFrom] = useState('UAH');\n  const [selectedTo, setSelectedTo] = useState('USD');\n  const [amount, setAmount] = useState('');\n  const [convertAmount, setConvertAmount] = useState(0);\n  // const [error, setError] = useState<Error | null>(null);\n  // const dispatch = useDispatch();\n  // const curretcies = useSelector(getCurrenciesSelector);\n\n  // const loadCurrencies = async () => {\n  //   const arrOfCurrencies: Currency[] = await getJsonApiArray();\n\n  //   console.log(arrOfCurrencies);\n\n  // setCurrencies(arrOfCurrencies);\n  // };\n\n  const getSelectedCurr = (str: string, type: string) => {\n    switch (type) {\n      case 'from':\n        setSelectedFrom(str);\n        break;\n\n      case 'to':\n        setSelectedTo(str);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {\n    const { value, name } = event.target;\n\n    console.log(name, value); // eslint-disable-line no-console\n\n    switch (name) {\n      case 'selectedFrom':\n        setSelectedFrom(value);\n        break;\n\n      case 'selectedTo':\n        setSelectedTo(value);\n        break;\n\n      case 'amount':\n        setAmount(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const invertCurrencies = () => {\n    const from = selectedFrom;\n    const oldAmount = amount;\n\n    setSelectedFrom(selectedTo);\n    setSelectedTo(from);\n    setAmount(convertAmount.toString());\n    setConvertAmount(+oldAmount);\n  };\n\n  const convertRes = async (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    const getExchange: Curr = await getExchangeRates(selectedFrom, selectedTo);\n    const exchange = +Object.values(getExchange)[0];\n    const result = +(exchange * +amount).toFixed(2);\n\n    setConvertAmount(result);\n  };\n\n  // useEffect(() => {\n  //   loadCurrencies();\n  // }, []);\n\n  return (\n    <>\n      <form className=\"convertor\">\n        <h1 className=\"convertor__title\">Currency Convertor</h1>\n        <div className=\"convertor__conteiner mb-3\">\n          <label htmlFor=\"amount\" className=\"form-label\">\n            Enter Ammount\n          </label>\n          <input\n            className=\"convertor__input\"\n            type=\"number\"\n            name=\"amount\"\n            id=\"amount\"\n            value={amount}\n            onChange={(e) => handleChange(e)}\n          />\n        </div>\n        <div className=\"convertor__selectors\">\n          <Search\n            arrayDataForSelect={currencies}\n            setCurrentValue={getSelectedCurr}\n            type=\"from\"\n            currentValue={selectedFrom}\n            changeCurrentValue={setSelectedFrom}\n          />\n          <button\n            className=\"convertor__invert btn btn-primary w-25\"\n            type=\"button\"\n            onClick={invertCurrencies}\n          >\n            <i className=\"fas fa-exchange-alt\"></i>\n          </button>\n          <Search\n            arrayDataForSelect={currencies}\n            setCurrentValue={getSelectedCurr}\n            type=\"to\"\n            currentValue={selectedTo}\n            changeCurrentValue={setSelectedTo}\n          />\n        </div>\n        <h4 className=\"convertor__p\">{`${amount} ${selectedFrom} = ${convertAmount} ${selectedTo}`}</h4>\n        <div className=\"mb-3\">\n          <button\n            type=\"button\"\n            onClick={(e) => convertRes(e)}\n            className=\"btn btn-primary w-100\"\n          >\n            Convert\n          </button>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}