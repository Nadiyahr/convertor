{"version":3,"sources":["store/features/currencies/currenciesSlice.ts","store/features/from/fromSlice.ts","store/features/to/toSlice.ts","store/features/filter/filterSlice.ts","store/features/base/baseSlice.ts","store/features/render/renderSlice.ts","store/features/reverse/reverseSlice.ts","store/services/currenciesApi.ts","store/features/preparedQuery/preparedQuerySlice.ts","store/store.ts","components/Selects/selects.tsx","components/Result/result.tsx","components/Calculator/calculator.tsx","components/CurrenciesList/currenciesList.tsx","App.tsx","index.tsx"],"names":["currenciesSlice","createSlice","name","initialState","data","reducers","loadCurrencies","state","action","payload","actions","currenciesReducer","reducer","fromSlice","value","loadFromValue","toSlice","loadToValue","filterSlice","array","loadFiltredCurrenciess","baseValue","loadBaseValue","render","isShouldRender","reverse","isShouldReverse","currenciesApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","prepareHeaders","headers","set","endpoints","builder","getCurrencies","query","getExchangeRates","combineStr","getListRares","useGetCurrenciesQuery","useGetExchangeRatesQuery","useGetListRaresQuery","prepareQuerygSlice","loadPrepareQuery","store","configureStore","currencies","fromValue","fromReducer","toValue","toReducer","filtredCurrencies","filterReducer","baseReducer","renderReducer","reverseReducer","prepareString","prepareQueryReducer","middleware","getDefaultMiddleware","concat","setupListeners","dispatch","Selects","props","typeProps","useDispatch","type","arrData","useSelector","arrDataFilter","invert","useState","internFrom","setInternFrom","internTo","setInternTo","internBase","setInternBase","displaySelect","setDisplaySelect","console","log","useEffect","className","htmlFor","style","textTransform","placeholder","id","slice","onChange","e","ev","typeS","target","toUpperCase","filtredArr","filter","toLowerCase","includes","onCange","onFocus","selectType","maxLength","icon","faCaretUp","faCaretDown","map","onClick","str","onClickLi","join","Result","amount","from","result","toFixed","to","Calculator","selectedFrom","selectedTo","setAmount","validator","enterValue","isNaN","test","convertRes","a","newFrom","replace","trim","newTo","find","x","paramsQuery","amountFrom","preparedQuery","event","handleChange","temoraryFtom","faRotate","CurrenciesList","exchangeRates","resultRates","setResultRates","combineArr","item","Object","entries","quotes","val","Number","App","symbols","role","path","element","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.809de045.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface CurenciesState {\n  data: string[][]\n}\n\nconst initialState: CurenciesState = {\n  data: []\n};\n\nexport const currenciesSlice = createSlice({\n  name: 'currencies',\n  initialState,\n  reducers: {\n    loadCurrencies: (state, action: PayloadAction<string[][]>) => {\n      state.data = action.payload;\n    }\n  }\n});\n\nexport const { loadCurrencies } = currenciesSlice.actions;\n\nexport const currenciesReducer = currenciesSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface FromState {\n  value: string\n}\n\nconst initialState: FromState = {\n  value: 'UAH Ukrainian Hryvnia'\n};\n\nexport const fromSlice = createSlice({\n  name: 'fromValue',\n  initialState,\n  reducers: {\n    loadFromValue: (state, action: PayloadAction<string>) => {\n      state.value = action.payload;\n    }\n  }\n});\n\nexport const { loadFromValue } = fromSlice.actions;\n\nexport default fromSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface ToState {\n  value: string\n}\n\nconst initialState: ToState = {\n  value: 'USD United States Dollar'\n};\n\nexport const toSlice = createSlice({\n  name: 'toValue',\n  initialState,\n  reducers: {\n    loadToValue: (state, action: PayloadAction<string>) => {\n      state.value = action.payload;\n    }\n  }\n});\n\nexport const { loadToValue} = toSlice.actions;\n\nexport default toSlice.reducer;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface FilterState {\n  array: string[][]\n}\n\nconst initialState: FilterState = {\n  array: []\n};\n\nexport const filterSlice = createSlice({\n  name: 'filtred',\n  initialState,\n  reducers: {\n    loadFiltredCurrenciess: (state, action: PayloadAction<string[][]>) => {\n      state.array = action.payload;\n    }\n  }\n});\n\nexport const { loadFiltredCurrenciess } = filterSlice.actions;\n\nexport default filterSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface BaseState {\n  value: string\n}\n\nconst initialState: BaseState = {\n  value: 'USD United States Dollar'\n};\n\nexport const baseValue = createSlice({\n  name: 'baseValue',\n  initialState,\n  reducers: {\n    loadBaseValue: (state, action: PayloadAction<string>) => {\n      state.value = action.payload;\n    }\n  }\n});\n\nexport const { loadBaseValue} = baseValue.actions;\n\nexport default baseValue.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface RenderState {\n  value: boolean\n}\n\nconst initialState: RenderState = {\n  value: true\n};\n\nexport const render = createSlice({\n  name: 'render',\n  initialState,\n  reducers: {\n    isShouldRender: (state, action: PayloadAction<boolean>) => {\n      state.value = action.payload;\n    }\n  }\n});\n\nexport const { isShouldRender} = render.actions;\n\nexport default render.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface RverseState {\n  value: boolean\n}\n\nconst initialState: RverseState = {\n  value: true\n};\n\nexport const reverse = createSlice({\n  name: 'reverse',\n  initialState,\n  reducers: {\n    isShouldReverse: (state, action: PayloadAction<boolean>) => {\n      state.value = action.payload;\n    }\n  }\n});\n\nexport const { isShouldReverse} = reverse.actions;\n\nexport default reverse.reducer;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst apiKey = 'VrLd2rRsJm6EN0BsvafaQkLbWvU2jl91';\n// const apiKey = 'QcNkBWCbg01lRNKI6H64YumEVU0shxS7';\n\nconst baseUrl = 'https://api.apilayer.com/exchangerates_data/';\n// const baseUrl = 'https://api.apilayer.com/currency_data/';\n// const baseUrl = 'https://api.apilayer.com/fixer/';\n\nexport const currenciesApi = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({baseUrl: baseUrl, prepareHeaders: (headers ) => {\n    headers.set('apikey', apiKey);\n    return headers;\n  }}),\n  endpoints: (builder) => ({\n    getCurrencies: builder.query<Currencies, string>({\n      query: (name) => name,\n    }),\n    getExchangeRates: builder.query<Result, string>({\n      query: (combineStr) => combineStr,\n    }),\n    getListRares: builder.query<Curr, string>({\n      query: (baseQuery) => baseQuery\n    })\n  })\n});\n\nexport const { useGetCurrenciesQuery, useGetExchangeRatesQuery, useGetListRaresQuery } = currenciesApi;\n ","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface PrepareQueryState {\n  query: string\n}\n\nconst initialState: PrepareQueryState = {\n  query: ''\n};\n\nexport const prepareQuerygSlice = createSlice({\n  name: 'prepareString',\n  initialState,\n  reducers: {\n    loadPrepareQuery: (state, action: PayloadAction<string>) => {\n      state.query = action.payload;\n    }\n  }\n});\n\nexport const { loadPrepareQuery } = prepareQuerygSlice.actions;\n\nexport default prepareQuerygSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { currenciesReducer } from './features/currencies/currenciesSlice';\nimport fromReducer from './features/from/fromSlice';\nimport toReducer from './features/to/toSlice';\nimport filterReducer from './features/filter/filterSlice';\nimport baseReducer from './features/base/baseSlice';\nimport renderReducer from './features/render/renderSlice';\nimport reverseReducer from './features/reverse/reverseSlice';\nimport { currenciesApi } from './services/currenciesApi';\nimport prepareQueryReducer from './features/preparedQuery/preparedQuerySlice';\n\nexport const store = configureStore({\n  reducer: {\n    currencies: currenciesReducer,\n    fromValue: fromReducer,\n    toValue: toReducer,\n    filtredCurrencies: filterReducer,\n    baseValue: baseReducer,\n    render: renderReducer,\n    reverse: reverseReducer,\n    prepareString: prepareQueryReducer,\n    [currenciesApi.reducerPath]: currenciesApi.reducer,\n  },\n\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(currenciesApi.middleware),\n});\n\nsetupListeners(store.dispatch);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useState } from 'react';\nimport { RootState } from '../../store/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isShouldReverse } from '../../store/features/reverse/reverseSlice';\nimport { isShouldRender } from '../../store/features/render/renderSlice';\nimport { loadFiltredCurrenciess } from '../../store/features/filter/filterSlice';\nimport { loadFromValue } from '../../store/features/from/fromSlice';\nimport { loadToValue } from '../../store/features/to/toSlice';\nimport { loadBaseValue } from '../../store/features/base/baseSlice';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport './Selects.scss';\n\ntype Props = {\n  type: string,\n};\n\nexport const Selects: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  const { type } = props;\n  const arrData = useSelector((state: RootState) => state.currencies.data);\n  const fromValue = useSelector((state: RootState) => state.fromValue.value);\n  const toValue = useSelector((state: RootState) => state.toValue.value);\n  const baseValue = useSelector((state: RootState) => state.baseValue.value);\n  const arrDataFilter = useSelector((state: RootState) => state.filtredCurrencies.array);\n  const invert = useSelector((state: RootState) => state.reverse.value);\n  const [internFrom, setInternFrom] = useState(fromValue);\n  const [internTo, setInternTo] = useState(toValue);\n  const [internBase, setInternBase] = useState(baseValue);\n  const [displaySelect, setDisplaySelect] = useState(false);\n\n  const setValue = (typeProps: string) => {\n\n    const switchTypes: Curr = {\n      'from': internFrom,\n      'to': internTo,\n      'base': internBase.slice(0,3)\n    };\n\n    return switchTypes[typeProps];\n  };\n\n  const onFocus = (selectType: string) => {\n    setDisplaySelect(true);\n    dispatch(isShouldRender(false));\n    dispatch(loadFiltredCurrenciess(arrData));\n\n    switch (selectType) {\n      case 'from':\n        setInternFrom('');\n        return internFrom;\n\n      case 'to':\n        setInternTo('');\n        return internTo;\n\n      case 'base':\n        setInternBase('');\n        return internBase;\n\n      default:\n        break;\n    }\n  };\n\n  const onCange = (ev: React.ChangeEvent<HTMLInputElement>, typeS: string) => {\n    const { value } = ev.target;\n\n    setDisplaySelect(true);\n\n    switch (typeS) {\n      case 'from':\n        setInternFrom(value.toUpperCase());\n        break;\n\n      case 'to':\n        setInternTo(value.toUpperCase());\n        break;\n\n      case 'base':\n        setInternBase(value.toUpperCase());\n        break;\n\n      default:\n        break;\n    }\n\n    const filtredArr = arrData.filter((data) => value === ''\n      ? data\n      : data[0].toLowerCase().includes(value.toLowerCase()));\n\n    dispatch(loadFiltredCurrenciess(filtredArr));\n  };\n\n  const onClickLi = (str: string, type: string) => {\n    switch (type) {\n      case 'from':\n        dispatch(loadFromValue(str));\n        setInternFrom(str);\n        dispatch(loadFiltredCurrenciess(arrData));\n        return fromValue;\n\n      case 'to':\n        dispatch(loadToValue(str));\n        setInternTo(str);\n        dispatch(loadFiltredCurrenciess(arrData));\n        return toValue;\n\n      case 'base':\n        dispatch(loadBaseValue(str));\n        setInternBase(str.slice(0,3));\n        dispatch(loadFiltredCurrenciess(arrData));\n        return baseValue;\n\n        default:\n          break;\n    }\n  };\n  console.log(arrDataFilter);\n  console.log(arrData);\n\n  useEffect(() => {\n    if (invert) {\n      setInternFrom(fromValue);\n      setInternTo(toValue);\n      dispatch(isShouldReverse(false));\n    }  \n  }, [invert,]);\n\n  return (\n    <div className=\"search\">\n      <label htmlFor=\"curr\" style={{textTransform: 'capitalize'}}>\n        {type}\n        <input\n          type=\"text\"\n          placeholder=\"Start typting for filter\"\n          className=\"search__input\"\n          name=\"currencies\"\n          id=\"curr\"\n          value={setValue(type)}\n          onChange={(e) => onCange(e, type)}\n          onFocus={() => onFocus(type)}\n          maxLength={3}\n        />\n        <div className=\"search__icon\">\n        {displaySelect\n        ? <FontAwesomeIcon icon={faCaretUp} />\n        : <FontAwesomeIcon icon={faCaretDown} />}\n        </div>\n      </label>\n      {displaySelect && (\n        <ul className=\"search__list list-group\">\n          {arrDataFilter.map((data: string[]) => (\n            <li\n              className=\"search__item list-group-item list-group-item-action\"\n              key={`${data[0]}${type}`}\n              onClick={() => {\n                onClickLi(data.join(' '), type);\n                setDisplaySelect(false);\n              }}\n            >\n              {`${data.join(' ')}`}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import React, { FC, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport { isShouldRender } from '../../store/features/render/renderSlice';\nimport { useGetExchangeRatesQuery } from '../../store/services/currenciesApi';\n\nexport const Result: FC = () => {\n  const dispatch = useDispatch();\n  const render = useSelector((state: RootState) => state.render.value);\n  const query = useSelector((state: RootState) => state.prepareString.query);\n  const { data } = useGetExchangeRatesQuery(query);\n\n  useEffect(() => {\n    dispatch(isShouldRender(true));\n  },[query]);\n\n  return (\n    <h4>\n      {data && render &&\n       `${data.query.amount} ${data.query.from} = ${data.result.toFixed(2)} ${data.query.to}`\n      }\n    </h4>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { RootState } from '../../store/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadFromValue } from '../../store/features/from/fromSlice';\nimport { loadToValue } from '../../store/features/to/toSlice';\nimport { isShouldReverse } from '../../store/features/reverse/reverseSlice';\nimport { isShouldRender } from '../../store/features/render/renderSlice';\nimport { Selects } from '../Selects';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRotate } from '@fortawesome/free-solid-svg-icons';\nimport { loadPrepareQuery } from '../../store/features/preparedQuery/preparedQuerySlice';\nimport { Result } from '../Result';\nimport './Calculator.scss';\n\nexport const Calculator = () => {\n  const dispatch = useDispatch();\n  const query = useSelector((state: RootState) => state.prepareString.query);\n  const currencies = useSelector((state: RootState) => state.currencies.data);\n  const selectedFrom = useSelector((state: RootState) => state.fromValue.value);\n  const selectedTo = useSelector((state: RootState) => state.toValue.value);\n  const [amount, setAmount] = useState('');\n  \n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {\n    const { value, name } = event.target;\n\n    // const switchCase = {\n    //   selectedFrom: dispatch(loadFromValue(value)),\n    //   selectedTo: dispatch(loadToValue(value)),\n    //   amount: setAmount(value),\n    // };\n\n    // switcCase[name](name);\n\n    switch (name) {\n      case 'selectedFrom':\n        dispatch(loadFromValue(value));\n        break;\n\n      case 'selectedTo':\n        dispatch(loadToValue(value));\n        break;\n\n      case 'amount':\n        setAmount(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const invertCurrencies = () => {\n    const temoraryFtom = selectedFrom;\n\n    dispatch(loadFromValue(selectedTo));\n    dispatch(loadToValue(temoraryFtom));\n    dispatch(isShouldReverse(true));\n    dispatch(isShouldRender(false));\n    convertRes();\n  };\n\n  const validator = (enterValue: string) => {\n    if (!isNaN(+enterValue)) {\n      return true;\n    }\n\n    const RegExp = /^\\d+ [A-Z,a-z]{3} in [A-Z,a-z]{3}/g;\n\n    return RegExp.test(enterValue);\n  };\n\n  const convertRes = async () => {\n    if (validator(amount)) {\n  \n      if (isNaN(+amount)) {\n        const newFrom = amount.replace(/\\d/g, '').trim().slice(0,3).toUpperCase();\n        const newTo = amount.replace(/\\d/g, '').trim().slice(-3).toUpperCase();\n\n        dispatch(loadFromValue(currencies.find(x => x[0] === newFrom)!.join(' ')));\n        dispatch(loadToValue(currencies.find(x => x[0] === newTo)!.join(' ')));\n      }\n\n      const paramsQuery = {\n        amountFrom: amount.replace(/\\D/g, ''),\n        from: selectedFrom.slice(0,3),\n        to: selectedTo.slice(0,3)\n      };\n\n      const preparedQuery = `/convert?to=${paramsQuery.to}&from=${paramsQuery.from}&amount=${paramsQuery.amountFrom}`;\n\n      dispatch(loadPrepareQuery(preparedQuery));\n    }\n  };\n\n  useEffect(() => {\n    dispatch(isShouldRender(false));\n  }, []);\n\n  return (\n    <form className=\"convertor\">\n      <h3 className=\"convertor__title\">Currency Convertor</h3>\n      <div className=\"convertor__conteiner mb-3\">\n        <label htmlFor=\"amount\" className=\"form-label\">\n          Enter Ammount\n        </label>\n        <input\n          placeholder=\"Example: 100 uah in usd or 100\"\n          className=\"convertor__input\"\n          type=\"text\"\n          name=\"amount\"\n          id=\"amount\"\n          value={amount}\n          onChange={(e) => handleChange(e)}\n        />\n      </div>\n      <div className=\"convertor__selectors\">\n        <Selects\n          type=\"from\"\n        />\n        <button\n          className=\"convertor__invert btn btn-primary\"\n          type=\"button\"\n          onClick={invertCurrencies}\n        >\n          <FontAwesomeIcon icon={faRotate} />\n        </button>\n        <Selects\n          type=\"to\"\n        />\n      </div>\n      <div className=\"mb-3\">\n        <button\n          type=\"button\"\n          onClick={() => convertRes()}\n          className=\"btn btn-primary w-100\"\n        >\n          Convert\n        </button>\n      </div>\n      <div className=\"convertor__inner\">\n        {query && <Result />}\n      </div>\n    </form>\n  );\n};\n","import React, { FC, useState, useEffect } from 'react';\nimport { RootState } from '../../store/store';\nimport { useSelector } from 'react-redux';\nimport { Selects } from '../Selects';\nimport { useGetListRaresQuery } from '../../store/services/currenciesApi';\nimport './CurrenciesList.scss';\n\nexport const CurrenciesList: FC = () => {\n  const baseValue = useSelector((state: RootState) => state.baseValue.value);\n  const exchangeRates = ['USD','EUR','PLN','CZK','GBP','UAH'];\n  // const query = `live?source=${baseValue.slice(0,3)}&currencies=${exchangeRates.join(',')}`;\n  const query = `latest?symbols=${exchangeRates.join(',')}&base=${baseValue.slice(0,3)}`;\n  const { data } = useGetListRaresQuery(query);\n  const [resultRates, setResultRates] = useState<string[][]>([]);\n  const combineArr = resultRates.filter(item => exchangeRates.includes(item[0].slice(-3)) && item[0].slice(-3) !== baseValue);\n\n\n\n  const convert = (val: string) => {\n    const number = 1 / Number(val);\n\n    return number.toFixed(2);\n  };\n\n  useEffect(() => {\n    if (data) {\n      setResultRates(Object.entries(data.quotes));\n    }\n  },[baseValue]);\n\n  return (\n    <div className=\"List\">\n      <h3>List Of Exchange Rates</h3>\n      <Selects type=\"base\" />\n      <ul className=\"list-group list-group-flush\">\n        {baseValue && combineArr.map((item: string[]) => (\n          <li className=\"List__item list-group-item list-group-item-dark\" key={item[0]}>\n            {`1 ${item[0].slice(-3)} = ${convert(item[1])} ${baseValue.slice(0,3)}`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport { Calculator } from './components/Calculator';\nimport { CurrenciesList } from './components/CurrenciesList';\nimport { loadCurrencies } from './store/features/currencies/currenciesSlice';\nimport { useGetCurrenciesQuery } from './store/services/currenciesApi';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const{ data } = useGetCurrenciesQuery('symbols');\n  const array = Object.entries(data?.symbols || {});\n\n  useEffect(() => {\n      dispatch(loadCurrencies(array));\n  },[array]);\n\n  return (\n    <div className=\"app\">\n      <nav className=\"app__nav\">\n        <Link\n          to=\"/\"\n          className=\"app__btn btn btn-pink\"\n          role=\"button\"\n        >\n          Calculator\n        </Link>\n        <Link\n          to=\"/list\"\n          className=\"app__btn btn btn-pink\"\n          role=\"button\"\n        >\n          List Exchange Rates\n        </Link>\n      </nav>\n      <Routes>\n        <Route path=\"/\" element={<Calculator/>} />\n        <Route path=\"/list\" element={<CurrenciesList/>} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}