{"version":3,"sources":["search/search.tsx","api/index.ts","App.tsx","index.tsx"],"names":["Search","props","dataSelect","setCurr","type","defaultVal","useState","query","setQuery","arrData","setArrData","select","setSelect","className","name","id","value","onChange","e","ev","target","toUpperCase","console","log","filtredArr","filter","data","toLowerCase","includes","onCange","onFocus","maxLength","map","onClick","myHeaders","Headers","append","requestOptions","method","headers","getExchangeRates","amount","from","to","fetch","then","response","text","result","JSON","parse","App","currencies","setCurrencies","selectedFrom","setSelectedFrom","selectedTo","setSelectedTo","setAmount","convert","setConvert","loadCurrencies","a","ok","currencyConverterApi","res","json","Object","keys","err","results","arrOfCurrencies","getSelectedCurr","str","convertRes","preventDefault","getExchange","useEffect","htmlFor","event","handleChange","data-bs-toggle","data-bs-trigger","data-bs-content","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.388a2824.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './search.scss';\n// import { useSelector } from 'react-redux';\n\ntype Props = {\n  dataSelect: string[],\n  setCurr: (str: string, type: string) => void;\n  type: string,\n  defaultVal: string;\n};\n\nexport const Search: React.FC<Props> = (props) => {\n  const {\n    dataSelect, setCurr, type, defaultVal,\n  } = props;\n  const [query, setQuery] = useState(defaultVal);\n  const [arrData, setArrData] = useState<string[] | null>(null);\n  const [select, setSelect] = useState(false);\n\n  const onFocus = () => {\n    setSelect(true);\n    setQuery('');\n  };\n\n  const onCange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setSelect(true);\n    setArrData(dataSelect);\n\n    const { value } = ev.target;\n\n    setQuery(value.toUpperCase());\n    console.log(dataSelect);\n\n    const filtredArr = dataSelect.filter(data => data.toLowerCase().includes(value.toLowerCase()));\n\n    console.log(filtredArr);\n    setArrData(filtredArr);\n  };\n\n  return (\n    <>\n      <input\n        className=\"search\"\n        type=\"text\"\n        name=\"currencies\"\n        id=\"curr\"\n        value={query}\n        onChange={(e) => onCange(e)}\n        onFocus={onFocus}\n        maxLength={3}\n      />\n      {arrData && select && (\n        <ul className=\"search__list list-group\">\n          {arrData.map(data => (\n            <li\n              className=\"search__item list-group-item list-group-item-action\"\n              key={data}\n              onClick={() => {\n                setQuery(data);\n                setCurr(data, type);\n                setSelect(false);\n              }}\n            >\n              {data}\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","const currencyHttp = 'http://free.currconv.com';\n// const exchange = 'https://api.exchangerate.host/latest';\nconst apiKey = 'dd3f60ee0680556feb45';\nconst myHeaders = new Headers();\n\nmyHeaders.append('apikey', 'QcNkBWCbg01lRNKI6H64YumEVU0shxS7');\n\nconst requestOptions = {\n  method: 'GET',\n  // redirect: 'follow',\n  headers: myHeaders,\n};\n\nexport const getJsonApiLayer = () => {\n  return fetch('https://api.apilayer.com/fixer/symbols', requestOptions)\n    .then(async response => {\n      if (response.ok) {\n        return response.text();\n      }\n\n      const currencyConverterApi = fetch(`${currencyHttp}/api/v7/currencies?apiKey=${apiKey}`)\n        .then(res => res.json());\n\n      return currencyConverterApi;\n    })\n    .then(result => {\n      try {\n        return Object.keys(JSON.parse(result));\n      } catch (err) {\n        console.log(err);\n\n        return Object.keys(result.results);\n      }\n    });\n};\n\nexport const getExchangeRates = (amount: string, from: string, to: string) => {\n  return fetch(`https://api.apilayer.com/exchangerates_data/convert?to=${to}&from=${from}&amount=${amount}`, requestOptions)\n    .then(response => response.text())\n    .then(result => JSON.parse(result));\n};\n","import React, { useEffect, useState } from 'react';\nimport { Search } from './search';\n// import { useDispatch, useSelector } from 'react-redux';\nimport './App.scss';\n\n// import { getCurrenciesSelector } from './store/selectors';\n// export { setCurrenciesAction} from './store/actions';\nimport { getExchangeRates, getJsonApiLayer } from './api';\n\nconst App: React.FC = () => {\n  const [currencies, setCurrencies] = useState<string[]>([]);\n  const [selectedFrom, setSelectedFrom] = useState('UAH');\n  const [selectedTo, setSelectedTo] = useState('USD');\n  const [amount, setAmount] = useState('');\n  const [convert, setConvert] = useState(0);\n  // const [error, setError] = useState<Error | null>(null);\n  // const dispatch = useDispatch();\n  // const curretcies = useSelector(getCurrenciesSelector);\n\n  const loadCurrencies = async () => {\n    const arrOfCurrencies: any = await getJsonApiLayer();\n\n    console.log(arrOfCurrencies);\n\n    setCurrencies(arrOfCurrencies);\n  };\n\n  const getSelectedCurr = (str: string, type: string) => {\n    switch (type) {\n      case 'from':\n        setSelectedFrom(str);\n        break;\n\n      case 'to':\n        setSelectedTo(str);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {\n    const { value, name } = event.target;\n\n    console.log(name, value); // eslint-disable-line no-console\n\n    switch (name) {\n      case 'selectedFrom':\n        setSelectedFrom(value);\n        break;\n\n      case 'selectedTo':\n        setSelectedTo(value);\n        break;\n\n      case 'amount':\n        setAmount(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const convertRes = async (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    const getExchange: Result = await getExchangeRates(amount, selectedFrom, selectedTo);\n\n    setConvert(getExchange.result);\n  };\n\n  useEffect(() => {\n    loadCurrencies();\n  }, []);\n\n  return (\n    <section className=\"convertor\">\n      <h1 className=\"convertor__title\">Convertor</h1>\n      <label htmlFor=\"amount\">\n        <input\n          type=\"number\"\n          name=\"amount\"\n          id=\"amount\"\n          value={amount}\n          onChange={(e) => handleChange(e)}\n        />\n      </label>\n      <Search dataSelect={currencies} setCurr={getSelectedCurr} type=\"from\" defaultVal={selectedFrom} />\n      <span\n        className=\"d-inline-block\"\n        data-bs-toggle=\"popover\"\n        data-bs-trigger=\"hover focus\"\n        data-bs-content=\"Invert currencies\"\n      >\n        convert to\n      </span>\n      <Search dataSelect={currencies} setCurr={getSelectedCurr} type=\"to\" defaultVal={selectedTo} />\n      {/* <label htmlFor=\"from\" className=\"convertor__label\">\n        Select a value from\n        <select\n          name=\"selectedFrom\"\n          value={selectedFrom}\n          onChange={(e) => handleChange(e)}\n        >\n          {currencies.map((curr) => (\n            <option key={curr}>{curr}</option>\n          ))}\n        </select>\n      </label>\n      <label htmlFor=\"to\" className=\"convertor__label\">\n        Select a value to\n        <select\n          name=\"selectedTo\"\n          value={selectedTo}\n          onChange={(e) => handleChange(e)}\n        >\n          {currencies.map((curr) => (\n            <option key={curr}>{curr}</option>\n          ))}\n        </select>\n      </label> */}\n      <button type=\"button\" onClick={(e) => convertRes(e)}>Convert</button>\n      <p>{convert}</p>\n      {/* <p>{error}</p> */}\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\n// import { Provider } from 'react-redux';\n// import { store } from './store';\nimport App from './App';\n\nReactDOM.render(\n  // <Provider store={store}>\n  <App />,\n  // </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}