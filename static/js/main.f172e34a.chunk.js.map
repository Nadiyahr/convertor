{"version":3,"sources":["store/actions.ts","store/index.ts","api/index.ts","App.tsx","index.tsx"],"names":["SET_CURRENCIES","initialState","currencies","store","createStore","state","action","type","payload","myHeaders","Headers","append","requestOptions","method","headers","getExchangeRates","amount","from","to","fetch","then","response","text","result","JSON","parse","App","useState","setCurrencies","selectedFrom","setSelectedFrom","selectedTo","setSelectedTo","setAmount","convert","setConvert","loadCurrencies","a","arrOfCurrencies","Object","keys","symbols","handleChange","event","target","value","name","console","log","convertRes","e","preventDefault","getExchange","useEffect","className","htmlFor","id","onChange","map","curr","onClick","ReactDOM","render","document","getElementById"],"mappings":"uQAAaA,EAAiB,iBCGxBC,EAAsB,CAC1BC,WAAY,IAgBDC,EAAQC,aAbL,WAA2C,IAA1CC,EAAyC,uDAAjCJ,EAAcK,EAAmB,uCACxD,OAAQA,EAAOC,MACb,KAAKP,EACH,OAAO,2BACFK,GADL,IAEEH,WAAW,YAAKI,EAAOE,WAG3B,QACE,OAAOH,M,+BCZPI,G,MAAY,IAAIC,SAEtBD,EAAUE,OAAO,SAAU,oCAE3B,IAAMC,EAAiB,CACrBC,OAAQ,MAERC,QAASL,GAUEM,EAAmB,SAACC,EAAgBC,EAAcC,GAC7D,OAAOC,MAAM,0DAAD,OAA2DD,EAA3D,iBAAsED,EAAtE,mBAAqFD,GAAUJ,GACxGQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIC,KAAKC,MAAMF,O,OC+EhBG,EA/FO,WACpB,MAAoCC,mBAAmB,IAAvD,mBAAOzB,EAAP,KAAmB0B,EAAnB,KAGA,EAAwCD,mBAAS,OAAjD,mBAAOE,EAAP,KAAqBC,EAArB,KACA,EAAoCH,mBAAS,OAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAA4BL,mBAAS,IAArC,mBAAOX,EAAP,KAAeiB,EAAf,KACA,EAA8BN,mBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAIMC,EAAc,uCAAG,4BAAAC,EAAA,sEDJhBlB,MAAM,yCAA0CP,GACpDQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIC,KAAKC,MAAMF,MCEN,OACfe,EADe,OAIrBV,EAAcW,OAAOC,KAAKF,EAAgBG,UAJrB,2CAAH,qDAQdC,EAAe,SAACC,GACpB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,KAIf,OAFAC,QAAQC,IAAIF,EAAMD,GAEVC,GACN,IAAK,eACHhB,EAAgBe,GAChB,MAEF,IAAK,aACHb,EAAca,GACd,MAEF,IAAK,SACHZ,EAAUY,KAQVI,EAAU,uCAAG,WAAOC,GAAP,eAAAb,EAAA,6DACjBa,EAAEC,iBADe,SAEiBpC,EAAiBC,EAAQa,EAAcE,GAFxD,OAEXqB,EAFW,OAIjBjB,EAAWiB,EAAY7B,QAJN,2CAAH,sDAWhB,OAJA8B,qBAAU,WACRjB,MACC,IAGD,0BAASkB,UAAU,YAAnB,UACE,oBAAIA,UAAU,mBAAd,uBACA,uBAAOC,QAAQ,SAAf,SACE,uBACEhD,KAAK,SACLuC,KAAK,SACLU,GAAG,SACHX,MAAO7B,EACPyC,SAAU,SAACP,GAAD,OAAOR,EAAaQ,QAGlC,wBAAOK,QAAQ,OAAOD,UAAU,mBAAhC,gCAEE,wBACER,KAAK,eACLD,MAAOhB,EACP4B,SAAU,SAACP,GAAD,OAAOR,EAAaQ,IAHhC,SAKGhD,EAAWwD,KAAI,SAACC,GAAD,OACd,iCAAoBA,GAAPA,WAInB,wBAAOJ,QAAQ,KAAKD,UAAU,mBAA9B,8BAEE,wBACER,KAAK,aACLD,MAAOd,EACP0B,SAAU,SAACP,GAAD,OAAOR,EAAaQ,IAHhC,SAKGhD,EAAWwD,KAAI,SAACC,GAAD,OACd,iCAAoBA,GAAPA,WAInB,wBAAQpD,KAAK,SAASqD,QAAS,SAACV,GAAD,OAAOD,EAAWC,IAAjD,qBACA,4BAAIhB,QC3FV2B,IAASC,OACP,cAAC,IAAD,CAAU3D,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEF4D,SAASC,eAAe,W","file":"static/js/main.f172e34a.chunk.js","sourcesContent":["export const SET_CURRENCIES = 'SET_CURRENCIES';\n\nexport const setCurrenciesAction = (payload: string[]) => ({\n  type: SET_CURRENCIES,\n  payload,\n});\n","import { createStore } from 'redux';\nimport { SET_CURRENCIES } from './actions';\n\nconst initialState: State = {\n  currencies: [],\n};\n\nconst reducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case SET_CURRENCIES:\n      return {\n        ...state,\n        currencies: [...action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer);\n","// const currencyHttp = 'http://free.currconv.com';\n// const exchange = 'https://api.exchangerate.host/latest';\n// const apiKey = 'dd3f60ee0680556feb45';\n// const apiKey ='QcNkBWCbg01lRNKI6H64YumEVU0shxS7';\nconst myHeaders = new Headers();\n\nmyHeaders.append('apikey', 'QcNkBWCbg01lRNKI6H64YumEVU0shxS7');\n\nconst requestOptions = {\n  method: 'GET',\n  // redirect: 'follow',\n  headers: myHeaders,\n};\n\nexport const getJsonApi = () => {\n  return fetch('https://api.apilayer.com/fixer/symbols', requestOptions)\n    .then(response => response.text())\n    .then(result => JSON.parse(result));\n  // .catch(error => console.log('error', error));\n};\n\nexport const getExchangeRates = (amount: string, from: string, to: string) => {\n  return fetch(`https://api.apilayer.com/exchangerates_data/convert?to=${to}&from=${from}&amount=${amount}`, requestOptions)\n    .then(response => response.text())\n    .then(result => JSON.parse(result));\n};\n","import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\nimport './App.scss';\n\n// import { getCurrenciesSelector } from './store/selectors';\n// export { setCurrenciesAction} from './store/actions';\nimport { getExchangeRates, getJsonApi } from './api';\n\nconst App: React.FC = () => {\n  const [currencies, setCurrencies] = useState<string[]>([]);\n  // const [from, setFrom] = useState<string[]>([]);\n  // const [to, setTo] = useState<string[]>([]);\n  const [selectedFrom, setSelectedFrom] = useState('UAH');\n  const [selectedTo, setSelectedTo] = useState('USD');\n  const [amount, setAmount] = useState('');\n  const [convert, setConvert] = useState(0);\n  // const dispatch = useDispatch();\n  // const curretcies = useSelector(getCurrenciesSelector);\n\n  const loadCurrencies = async () => {\n    const arrOfCurrencies: Currencies = await getJsonApi();\n\n    // console.log(Object.keys(arrOfCurrencies.symbols));\n    setCurrencies(Object.keys(arrOfCurrencies.symbols));\n    // setTo(Object.keys(arrOfCurrencies.symbols));\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>) => {\n    const { value, name } = event.target;\n\n    console.log(name, value); // eslint-disable-line no-console\n\n    switch (name) {\n      case 'selectedFrom':\n        setSelectedFrom(value);\n        break;\n\n      case 'selectedTo':\n        setSelectedTo(value);\n        break;\n\n      case 'amount':\n        setAmount(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const convertRes = async (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    const getExchange: Result = await getExchangeRates(amount, selectedFrom, selectedTo);\n\n    setConvert(getExchange.result);\n  };\n\n  useEffect(() => {\n    loadCurrencies();\n  }, []);\n\n  return (\n    <section className=\"convertor\">\n      <h1 className=\"convertor__title\">Convertor</h1>\n      <label htmlFor=\"amount\">\n        <input\n          type=\"number\"\n          name=\"amount\"\n          id=\"amount\"\n          value={amount}\n          onChange={(e) => handleChange(e)}\n        />\n      </label>\n      <label htmlFor=\"from\" className=\"convertor__label\">\n        Select a value from\n        <select\n          name=\"selectedFrom\"\n          value={selectedFrom}\n          onChange={(e) => handleChange(e)}\n        >\n          {currencies.map((curr) => (\n            <option key={curr}>{curr}</option>\n          ))}\n        </select>\n      </label>\n      <label htmlFor=\"to\" className=\"convertor__label\">\n        Select a value to\n        <select\n          name=\"selectedTo\"\n          value={selectedTo}\n          onChange={(e) => handleChange(e)}\n        >\n          {currencies.map((curr) => (\n            <option key={curr}>{curr}</option>\n          ))}\n        </select>\n      </label>\n      <button type=\"button\" onClick={(e) => convertRes(e)}>Convert</button>\n      <p>{convert}</p>\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}